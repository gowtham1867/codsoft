#include <iostream>
#include <vector>
#include <limits>

using namespace std;

const char PLAYER_X = 'X';
const char PLAYER_O = 'O';
const char EMPTY = ' ';

void printBoard(const vector<vector<char>>& board) {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            cout << board[i][j];
            if (j < 2) cout << " | ";
        }
        cout << endl;
        if (i < 2) cout << "---------" << endl;
    }
}

char checkWinner(const vector<vector<char>>& board) {
    for (int i = 0; i < 3; ++i) {
        if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != EMPTY)
            return board[i][0];
        if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != EMPTY)
            return board[0][i];
    }

  
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != EMPTY)
        return board[0][0];
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != EMPTY)
        return board[0][2];

    return EMPTY;
}


bool isBoardFull(const vector<vector<char>>& board) {
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            if (board[i][j] == EMPTY)
                return false;
    return true;
}


int minimax(vector<vector<char>>& board, int depth, bool isMaximizingPlayer) {
    char winner = checkWinner(board);
    if (winner == PLAYER_X) return 1;  
    if (winner == PLAYER_O) return -1; 
    if (isBoardFull(board)) return 0;  

    if (isMaximizingPlayer) {
        int best = numeric_limits<int>::min();

        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                if (board[i][j] == EMPTY) {
                    board[i][j] = PLAYER_X;  
                    best = max(best, minimax(board, depth + 1, false));
                    board[i][j] = EMPTY;     
                }
            }
        }
        return best;
    } else {
        int best = numeric_limits<int>::max();
       
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                if (board[i][j] == EMPTY) {
                    board[i][j] = PLAYER_O;  
                    best = min(best, minimax(board, depth + 1, true));
                    board[i][j] = EMPTY;     
                }
            }
        }
        return best;
    }
}


pair<int, int> getBestMove(vector<vector<char>>& board) {
    int bestVal = numeric_limits<int>::min();
    pair<int, int> bestMove = {-1, -1};
    
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (board[i][j] == EMPTY) {
                board[i][j] = PLAYER_X;  
                int moveVal = minimax(board, 0, false);
                board[i][j] = EMPTY;     
                
                if (moveVal > bestVal) {
                    bestMove = {i, j};
                    bestVal = moveVal;
                }
            }
        }
    }
    return bestMove;
}


void playGame() {
    vector<vector<char>> board(3, vector<char>(3, EMPTY));
    cout << "Welcome to Tic-Tac-Toe!" << endl;

    while (true) {
    
        int row, col;
        printBoard(board);
        cout << "Enter your move (row and column for O, space separated): ";
        cin >> row >> col;
        
        if (board[row][col] == EMPTY) {
            board[row][col] = PLAYER_O;
        } else {
            cout << "This spot is already taken. Try again." << endl;
            continue;
        }

      
        if (checkWinner(board) == PLAYER_O) {
            printBoard(board);
            cout << "You win!" << endl;
            break;
        }

     
        if (isBoardFull(board)) {
            printBoard(board);
            cout << "It's a draw!" << endl;
            break;
        }

        
        cout << "AI's turn (X):" << endl;
        pair<int, int> bestMove = getBestMove(board);
        board[bestMove.first][bestMove.second] = PLAYER_X;
        
    
        if (checkWinner(board) == PLAYER_X) {
            printBoard(board);
            cout << "AI wins!" << endl;
            break;
        }

        
        if (isBoardFull(board)) {
            printBoard(board);
            cout << "It's a draw!" << endl;
            break;
        }
    }
}

int main() {
    playGame();
    return 0;
}
